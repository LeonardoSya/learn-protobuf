// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "management.proto" (package "trpc.creator_center.mcn", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message trpc.creator_center.mcn.ClearReq
 */
export interface ClearReq {
    /**
     * 母账号vcuid
     *
     * @generated from protobuf field: string parent_vcuid = 1
     */
    parentVcuid: string;
    /**
     * 清退理由（文本）
     *
     * @generated from protobuf field: string reason = 2
     */
    reason: string;
    /**
     * 清退理由（图片）
     *
     * @generated from protobuf field: repeated string reason_images = 3
     */
    reasonImages: string[];
}
/**
 * @generated from protobuf message trpc.creator_center.mcn.ClearRsp
 */
export interface ClearRsp {
}
/**
 * @generated from protobuf message trpc.creator_center.mcn.ClearMcnReq
 */
export interface ClearMcnReq {
    /**
     * 母账号vcuid
     *
     * @generated from protobuf field: string parent_vcuid = 1
     */
    parentVcuid: string;
    /**
     * 清退理由（文本）
     *
     * @generated from protobuf field: string reason = 2
     */
    reason: string;
    /**
     * 清退理由（图片）
     *
     * @generated from protobuf field: repeated string reason_images = 3
     */
    reasonImages: string[];
    /**
     * 操作人
     *
     * @generated from protobuf field: string operator = 4
     */
    operator: string;
}
/**
 * @generated from protobuf message trpc.creator_center.mcn.ClearMcnRsp
 */
export interface ClearMcnRsp {
}
/**
 * @generated from protobuf message trpc.creator_center.mcn.BatchCheckIncomeStatusModificationWhitelistConditionsReq
 */
export interface BatchCheckIncomeStatusModificationWhitelistConditionsReq {
    /**
     * @generated from protobuf field: repeated string vcuids = 1
     */
    vcuids: string[];
}
/**
 * @generated from protobuf message trpc.creator_center.mcn.BatchCheckIncomeStatusModificationWhitelistConditionsRsp
 */
export interface BatchCheckIncomeStatusModificationWhitelistConditionsRsp {
    /**
     * map的key为vcuid
     *
     * @generated from protobuf field: map<string, trpc.creator_center.mcn.IncomeStatusModificationWhitelistConditions> result = 1
     */
    result: {
        [key: string]: IncomeStatusModificationWhitelistConditions;
    };
}
/**
 * @generated from protobuf message trpc.creator_center.mcn.IncomeStatusModificationWhitelistConditions
 */
export interface IncomeStatusModificationWhitelistConditions {
    /**
     * 是否满足条件
     *
     * @generated from protobuf field: bool satisfied = 1
     */
    satisfied: boolean;
    /**
     * 不满足的原因
     *
     * @generated from protobuf field: string reason = 2
     */
    reason: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClearReq$Type extends MessageType<ClearReq> {
    constructor() {
        super("trpc.creator_center.mcn.ClearReq", [
            { no: 1, name: "parent_vcuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reason_images", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClearReq>): ClearReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.parentVcuid = "";
        message.reason = "";
        message.reasonImages = [];
        if (value !== undefined)
            reflectionMergePartial<ClearReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearReq): ClearReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent_vcuid */ 1:
                    message.parentVcuid = reader.string();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                case /* repeated string reason_images */ 3:
                    message.reasonImages.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClearReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent_vcuid = 1; */
        if (message.parentVcuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parentVcuid);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        /* repeated string reason_images = 3; */
        for (let i = 0; i < message.reasonImages.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.reasonImages[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trpc.creator_center.mcn.ClearReq
 */
export const ClearReq = new ClearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearRsp$Type extends MessageType<ClearRsp> {
    constructor() {
        super("trpc.creator_center.mcn.ClearRsp", []);
    }
    create(value?: PartialMessage<ClearRsp>): ClearRsp {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClearRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearRsp): ClearRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClearRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trpc.creator_center.mcn.ClearRsp
 */
export const ClearRsp = new ClearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearMcnReq$Type extends MessageType<ClearMcnReq> {
    constructor() {
        super("trpc.creator_center.mcn.ClearMcnReq", [
            { no: 1, name: "parent_vcuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reason_images", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "operator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClearMcnReq>): ClearMcnReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.parentVcuid = "";
        message.reason = "";
        message.reasonImages = [];
        message.operator = "";
        if (value !== undefined)
            reflectionMergePartial<ClearMcnReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearMcnReq): ClearMcnReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent_vcuid */ 1:
                    message.parentVcuid = reader.string();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                case /* repeated string reason_images */ 3:
                    message.reasonImages.push(reader.string());
                    break;
                case /* string operator */ 4:
                    message.operator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClearMcnReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent_vcuid = 1; */
        if (message.parentVcuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parentVcuid);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        /* repeated string reason_images = 3; */
        for (let i = 0; i < message.reasonImages.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.reasonImages[i]);
        /* string operator = 4; */
        if (message.operator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.operator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trpc.creator_center.mcn.ClearMcnReq
 */
export const ClearMcnReq = new ClearMcnReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearMcnRsp$Type extends MessageType<ClearMcnRsp> {
    constructor() {
        super("trpc.creator_center.mcn.ClearMcnRsp", []);
    }
    create(value?: PartialMessage<ClearMcnRsp>): ClearMcnRsp {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClearMcnRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearMcnRsp): ClearMcnRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClearMcnRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trpc.creator_center.mcn.ClearMcnRsp
 */
export const ClearMcnRsp = new ClearMcnRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchCheckIncomeStatusModificationWhitelistConditionsReq$Type extends MessageType<BatchCheckIncomeStatusModificationWhitelistConditionsReq> {
    constructor() {
        super("trpc.creator_center.mcn.BatchCheckIncomeStatusModificationWhitelistConditionsReq", [
            { no: 1, name: "vcuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchCheckIncomeStatusModificationWhitelistConditionsReq>): BatchCheckIncomeStatusModificationWhitelistConditionsReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vcuids = [];
        if (value !== undefined)
            reflectionMergePartial<BatchCheckIncomeStatusModificationWhitelistConditionsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchCheckIncomeStatusModificationWhitelistConditionsReq): BatchCheckIncomeStatusModificationWhitelistConditionsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string vcuids */ 1:
                    message.vcuids.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchCheckIncomeStatusModificationWhitelistConditionsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string vcuids = 1; */
        for (let i = 0; i < message.vcuids.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.vcuids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trpc.creator_center.mcn.BatchCheckIncomeStatusModificationWhitelistConditionsReq
 */
export const BatchCheckIncomeStatusModificationWhitelistConditionsReq = new BatchCheckIncomeStatusModificationWhitelistConditionsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchCheckIncomeStatusModificationWhitelistConditionsRsp$Type extends MessageType<BatchCheckIncomeStatusModificationWhitelistConditionsRsp> {
    constructor() {
        super("trpc.creator_center.mcn.BatchCheckIncomeStatusModificationWhitelistConditionsRsp", [
            { no: 1, name: "result", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => IncomeStatusModificationWhitelistConditions } }
        ]);
    }
    create(value?: PartialMessage<BatchCheckIncomeStatusModificationWhitelistConditionsRsp>): BatchCheckIncomeStatusModificationWhitelistConditionsRsp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = {};
        if (value !== undefined)
            reflectionMergePartial<BatchCheckIncomeStatusModificationWhitelistConditionsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchCheckIncomeStatusModificationWhitelistConditionsRsp): BatchCheckIncomeStatusModificationWhitelistConditionsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, trpc.creator_center.mcn.IncomeStatusModificationWhitelistConditions> result */ 1:
                    this.binaryReadMap1(message.result, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: BatchCheckIncomeStatusModificationWhitelistConditionsRsp["result"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BatchCheckIncomeStatusModificationWhitelistConditionsRsp["result"] | undefined, val: BatchCheckIncomeStatusModificationWhitelistConditionsRsp["result"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = IncomeStatusModificationWhitelistConditions.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for trpc.creator_center.mcn.BatchCheckIncomeStatusModificationWhitelistConditionsRsp.result");
            }
        }
        map[key ?? ""] = val ?? IncomeStatusModificationWhitelistConditions.create();
    }
    internalBinaryWrite(message: BatchCheckIncomeStatusModificationWhitelistConditionsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, trpc.creator_center.mcn.IncomeStatusModificationWhitelistConditions> result = 1; */
        for (let k of globalThis.Object.keys(message.result)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            IncomeStatusModificationWhitelistConditions.internalBinaryWrite(message.result[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trpc.creator_center.mcn.BatchCheckIncomeStatusModificationWhitelistConditionsRsp
 */
export const BatchCheckIncomeStatusModificationWhitelistConditionsRsp = new BatchCheckIncomeStatusModificationWhitelistConditionsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IncomeStatusModificationWhitelistConditions$Type extends MessageType<IncomeStatusModificationWhitelistConditions> {
    constructor() {
        super("trpc.creator_center.mcn.IncomeStatusModificationWhitelistConditions", [
            { no: 1, name: "satisfied", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IncomeStatusModificationWhitelistConditions>): IncomeStatusModificationWhitelistConditions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.satisfied = false;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<IncomeStatusModificationWhitelistConditions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IncomeStatusModificationWhitelistConditions): IncomeStatusModificationWhitelistConditions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool satisfied */ 1:
                    message.satisfied = reader.bool();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IncomeStatusModificationWhitelistConditions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool satisfied = 1; */
        if (message.satisfied !== false)
            writer.tag(1, WireType.Varint).bool(message.satisfied);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trpc.creator_center.mcn.IncomeStatusModificationWhitelistConditions
 */
export const IncomeStatusModificationWhitelistConditions = new IncomeStatusModificationWhitelistConditions$Type();
/**
 * @generated ServiceType for protobuf service trpc.creator_center.mcn.Management
 */
export const Management = new ServiceType("trpc.creator_center.mcn.Management", [
    { name: "Clear", options: {}, I: ClearReq, O: ClearRsp },
    { name: "ClearMcn", options: {}, I: ClearMcnReq, O: ClearMcnRsp },
    { name: "BatchCheckIncomeStatusModificationWhitelistConditions", options: {}, I: BatchCheckIncomeStatusModificationWhitelistConditionsReq, O: BatchCheckIncomeStatusModificationWhitelistConditionsRsp }
]);
